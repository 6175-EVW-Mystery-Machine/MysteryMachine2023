// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax sparkMotor3;
private CANSparkMax sparkMotor4;
private MotorControllerGroup rightMotorControllerGroup;
private CANSparkMax sparkMotor1;
private CANSparkMax sparkMotor2;
private MotorControllerGroup leftMotorControllerGroup;
private DifferentialDrive differentialDrive1;
private Encoder leftEncoder;
private Encoder rightEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
sparkMotor3 = new CANSparkMax(3, MotorType.kBrushless);
 
 sparkMotor3.restoreFactoryDefaults();  
sparkMotor3.setInverted(false);
sparkMotor3.setIdleMode(IdleMode.kCoast);
sparkMotor3.burnFlash();
  

sparkMotor4 = new CANSparkMax(4, MotorType.kBrushless);
 
 sparkMotor4.restoreFactoryDefaults();  
sparkMotor4.setInverted(false);
sparkMotor4.setIdleMode(IdleMode.kCoast);
sparkMotor4.burnFlash();
  

rightMotorControllerGroup = new MotorControllerGroup(sparkMotor3, sparkMotor4  );
 addChild("Right Motor Controller Group",rightMotorControllerGroup);
 

sparkMotor1 = new CANSparkMax(1, MotorType.kBrushless);
 
 sparkMotor1.restoreFactoryDefaults();  
sparkMotor1.setInverted(false);
sparkMotor1.setIdleMode(IdleMode.kCoast);
sparkMotor1.burnFlash();
  

sparkMotor2 = new CANSparkMax(2, MotorType.kBrushless);
 
 sparkMotor2.restoreFactoryDefaults();  
sparkMotor2.setInverted(false);
sparkMotor2.setIdleMode(IdleMode.kCoast);
sparkMotor2.burnFlash();
  

leftMotorControllerGroup = new MotorControllerGroup(sparkMotor1, sparkMotor2  );
 addChild("Left Motor Controller Group",leftMotorControllerGroup);
 

differentialDrive1 = new DifferentialDrive(leftMotorControllerGroup, rightMotorControllerGroup);
 addChild("Differential Drive 1",differentialDrive1);
 differentialDrive1.setSafetyEnabled(true);
differentialDrive1.setExpiration(0.1);
differentialDrive1.setMaxOutput(1.0);


leftEncoder = new Encoder(0, 1, true, EncodingType.k4X);
 addChild("Left Encoder",leftEncoder);
 leftEncoder.setDistancePerPulse(0.013);

rightEncoder = new Encoder(2, 3, false, EncodingType.k4X);
 addChild("Right Encoder",rightEncoder);
 rightEncoder.setDistancePerPulse(0.013);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SmartDashboard.putBoolean("Drive Is BreakMode", get_isBreakMode());

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    public void my_driveArcade(double speed, double turn) {
        differentialDrive1.arcadeDrive(speed, turn);
    }
    
    public void my_DriveTank(double leftSpeed, double rightSpeed){
        differentialDrive1.tankDrive(leftSpeed, rightSpeed);
    }

    public void my_DriveStop(){
        differentialDrive1.arcadeDrive(0,0);
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public double getLeftEncoder_Inches(){
        return leftEncoder.getDistance();
    }

    public void resetLeftEncoder(){
        leftEncoder.reset();
    }

    public void resetRightEncoder(){
        rightEncoder.reset();
    }

    public double getRightEncoder_Inches(){
        return rightEncoder.getDistance();
    }

    public void setBreakMode(boolean isBreakMode){
        if(isBreakMode){
            sparkMotor1.setIdleMode(IdleMode.kBrake);
            sparkMotor2.setIdleMode(IdleMode.kBrake);
            sparkMotor3.setIdleMode(IdleMode.kBrake);
            sparkMotor4.setIdleMode(IdleMode.kBrake);
        }else{
            sparkMotor1.setIdleMode(IdleMode.kCoast);
            sparkMotor2.setIdleMode(IdleMode.kCoast);
            sparkMotor3.setIdleMode(IdleMode.kCoast);
            sparkMotor4.setIdleMode(IdleMode.kCoast);
        }
    }

    public boolean get_isBreakMode(){
        if(sparkMotor1.getIdleMode()==IdleMode.kBrake){
            return true;
        }else{
            return false;
        }
    }

}

